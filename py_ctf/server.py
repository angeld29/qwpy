###
### Generated by QuakeC -> Python translator
### Id: qc2python.py,v 1.5 2001/02/05 21:15:44 barryp Exp 
###
### 2001-02-17 Cleaned up translation (barryp)
###
from qwpython.qwsv import engine, Vector
from qwpython.qcsupport import qc

import defs

def monster_ogre(*qwp_extra):
    qc.self.remove()


def monster_demon1(*qwp_extra):
    qc.self.remove()


def monster_shambler(*qwp_extra):
    qc.self.remove()


def monster_knight(*qwp_extra):
    qc.self.remove()


def monster_army(*qwp_extra):
    qc.self.remove()


def monster_wizard(*qwp_extra):
    qc.self.remove()


def monster_dog(*qwp_extra):
    qc.self.remove()


def monster_zombie(*qwp_extra):
    qc.self.remove()


def monster_boss(*qwp_extra):
    qc.self.remove()


def monster_tarbaby(*qwp_extra):
    qc.self.remove()


def monster_hell_knight(*qwp_extra):
    qc.self.remove()


def monster_fish(*qwp_extra):
    qc.self.remove()


def monster_shalrath(*qwp_extra):
    qc.self.remove()


def monster_enforcer(*qwp_extra):
    qc.self.remove()


def monster_oldone(*qwp_extra):
    qc.self.remove()

# 
# ==============================================================================
# 
# MOVETARGET CODE
# 
# The angle of the movetarget effects standing and bowing direction, but has no effect on movement, which allways heads to the next target.
# 
# targetname
# must be present.  The name of this movetarget.
# 
# target
# the next spot to move to.  If not present, stop here for good.
# 
# pausetime
# The number of seconds to spend standing or bowing for path_stand or path_bow
# 
# ==============================================================================
# 

# 
# =============
# t_movetarget
# 
# Something has bumped into a movetarget.  If it is a monster
# moving towards it, change the next destination and continue.
# ==============
# 
def t_movetarget(*qwp_extra):
    if qc.other.movetarget != qc.self:
        return 
    if qc.other.enemy:
        return  #  fighting, not following a path
    temp = qc.self
    qc.self = qc.other
    qc.other = temp
    if qc.self.classname == 'monster_ogre':
        qc.self.sound(defs.CHAN_VOICE, 'ogre/ogdrag.wav', 1, defs.ATTN_IDLE) #  play chainsaw drag sound
    # dprint ("t_movetarget\n");
    qc.self.goalentity = qc.self.movetarget = qc.find(qc.world, 'targetname', qc.other.target)
    qc.self.ideal_yaw = qc.vectoyaw(qc.self.goalentity.origin - qc.self.origin)
    if not qc.self.movetarget:
        qc.self.pausetime = qc.time + 999999
        qc.self.th_stand()
        return 
        
    
def movetarget_f(*qwp_extra):
    if not qc.self.targetname:
        qc.objerror('monster_movetarget: no targetname')
    qc.self.solid = defs.SOLID_TRIGGER
    qc.self.touch = t_movetarget
    qc.setsize(qc.self, Vector(-8, -8, -8), Vector(8, 8, 8))

    
# QUAKED path_corner (0.5 0.3 0) (-8 -8 -8) (8 8 8)
# Monsters will continue walking towards the next target corner.
# 
def path_corner(*qwp_extra):
    movetarget_f()
